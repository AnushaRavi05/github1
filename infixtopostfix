#include<iostream>
#include<stack>
#include<string>

int precedence(char op)
  {
    stack<char>ch;
    string postfix=" ";
    if(ch=='+' || ch=='-')
    {
      return 1;
    }
    else if(ch=='*' || ch=='/')
    {
      return 2;
      }
      else if(ch=='^')
      {
        return 3;
      }
      return 0;
    }

string infixtopostfix(const string& infix)
  {
      stack<char>ch;
        string postfix=" ";
        for(char ch:infix)
          {
              if(isalnum(ch))
                {
                    postfix+=ch;
                  }
                else if(c=='(')
                  {
                      s.push(ch);
                  }
                else if(c==')')
                  {
                        while(!s.empty() && s.top()!=')')
                        {
                            postfix+=s.top();
                              s.pop();
                          }
                          s.pop();
                          }
                  else
                        {
                            while(!s.empty() && precedence(s.top())>= precedence(ch))
                              {
                                  postfix+=s.top();
                                  s.pop();
                                }
                                    s.push(ch);
                          
                            }
while(!s.empty())
  {
        postfix+=s.top();
          s.pop();
      }
return postfix;
}
string postfix(const string& postfix)
      {
          stack<int>s;
            for(char ch:postfix)
                {
                    if(isdigit(ch))
                        {
                          s.push(c-'0');
                          }
                      else if(ch=='+' || ch=='-' || ch=='*' || ch== '\' || ch=='^')
                        {
                              int operand1=s.top();s.pop();
                              int operand2=s.top();s.pop();
                            int result=applyoperand(operand1,operand2,ch);
                            s.push(result);
                            }}
                            return s.top();
                            }
      int applyoperand(int operand1,int operand2,char op)
                  {
                      switch(op)
                        {
                            case '+':return operand1 + operand2;
                                     case '-':return operand1 - operand2;
                                         case '*':return operand1 * operand2;
                                           case '\':return operand1 \operand2;
                                              case '^':return pow(operand1,operand2);
                                                      default:return 0;
                                        }}
int main()
  {    string infix;
      cout<<"enter infix";
          cin>>infix;
          string postfix=infixtopostfix(infix);
            int result=postfix(postfix);
            }

                                          

          
