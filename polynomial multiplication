#include <iostream>
using namespace std;

// Node structure for the polynomial
struct Node {
    int coeff; // Coefficient
    int exp;   // Exponent
    Node* next; // Pointer to the next node

    Node(int c, int e) : coeff(c), exp(e), next(nullptr) {}
};

// Function to insert a new term in the polynomial linked list
void insertTerm(Node*& head, int coeff, int exp) {
    Node* newNode = new Node(coeff, exp);
    if (!head) {
        head = newNode;
    } else {
        Node* current = head;
        Node* previous = nullptr;

        while (current && current->exp > exp) {
            previous = current;
            current = current->next;
        }

        if (current && current->exp == exp) {
            current->coeff += coeff; // Combine like terms
            delete newNode; // Don't need the new node if we combined
        } else {
            newNode->next = current;
            if (previous) {
                previous->next = newNode;
            } else {
                head = newNode; // New term is the new head
            }
        }
    }
}

// Function to multiply two polynomials
Node* multiplyPolynomials(Node* poly1, Node* poly2) {
    Node* result = nullptr;

    for (Node* p1 = poly1; p1; p1 = p1->next) {
        for (Node* p2 = poly2; p2; p2 = p2->next) {
            int newCoeff = p1->coeff * p2->coeff;
            int newExp = p1->exp + p2->exp;
            insertTerm(result, newCoeff, newExp);
        }
    }

    return result;
}

// Function to print the polynomial
void printPolynomial(Node* head) {
    if (!head) {
        cout << "0";
        return;
    }

    Node* current = head;
    while (current) {
        cout << (current->coeff > 0 && current != head ? "+" : "") 
             << current->coeff << "x^" << current->exp << " ";
        current = current->next;
    }
    cout << endl;
}

// Main function to demonstrate polynomial multiplication
int main() {
    Node* poly1 = nullptr;
    Node* poly2 = nullptr;

    // Example Polynomial 1: 3x^2 + 4x + 2
    insertTerm(poly1, 3, 2);
    insertTerm(poly1, 4, 1);
    insertTerm(poly1, 2, 0);

    // Example Polynomial 2: 5x + 3
    insertTerm(poly2, 5, 1);
    insertTerm(poly2, 3, 0);

    cout << "Polynomial 1: ";
    printPolynomial(poly1);
    
    cout << "Polynomial 2: ";
    printPolynomial(poly2);

    Node* result = multiplyPolynomials(poly1, poly2);

    cout << "Result of multiplication: ";
    printPolynomial(result);

    // Clean up memory (not shown here for brevity)

    return 0;
}
