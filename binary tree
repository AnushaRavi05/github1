#include<iostream>
using namespace std;
struct node
  {
      int data;
      node* left;
        node* right;
          node(int val):data(val),left(nullptr),right(nullptr) {};
    };
node* insert(node* root,int value)
    {
          if(root==nullptr)
              {
                  return new node(value);
                }
            else if(value<root->data)
                    {
                        root->left=insert(root->left,value);
                        }
                    else
                      {
                              root->right=insert(root->right,value);
                          }
                  return root;
                  }
node* findmin(node* root,int value)
    {
        while(root->left!=nullptr)
          {
                      root=root->left;
                }
              return root;
            }
node* deletenode(node* root,int value)
        {
            if(root==nullptr)
                      {
                          delete root;
                            return nullptr;
                          }
                 if(value<root->data)
                    {
                          root->left=deletenode(root->left,value);
                        }
                        else if(value>root->data)
                            {
                                      root->right=deletenode(root->right,value);
                                }
                              else
                                {
                                  if(root->right==nullptr && root->left==nullptr)
                                    {
                                              delete root;
                                        }
                                        else if(root->right==nullptr)
                                                {
                                                    node* temp=root->left;
                                                      delete root;
                                                      return temp;
                                              }
                                            else if(root->left==nullptr)
                                                  {
                                                          node* temp=root->right;
                                                              delete root;
                                                          return temp;
                                                        }}
                                                          
                                                          
                                                                node* temp=findmin(root->right,value)
                                                                  {
                                                                            root->data=temp->data;
                                                                            root->right=deletenode(root->right,temp->data);
                                                                                }
                                                                            return root;
}

void inorder(node* root)
      {
          if(root!=nullptr)
          {
            inorder(root->left);
              cout<<root->data<<" ";
          inorder(root->right);
        }}
void preorder(node* root)
      {
          if(root!=nullptr)
          {
            
              cout<<root->data<<" ";
          preorder(root->left);
preorder(root->right);
        }}
void postorder(node* root)
      {
          if(root!=nullptr)
          {
          postorder(root->left);
postorder(root->right);
 cout<<root->data<<" ";
        }}

            
int main()
      {
            int value;
node* root=nullptr;
            int choice;
            while(true)
            {
                  cout<<"enter choice 1.insert 2.delete 3.inorder 4.preorder 5.postorder 6.print ";
                        cin>>choice;
                  switch(choice)
{
        case 1:
            cout<<"enter value";
                cin>>value;
                  root=insert(root,value);
                  break;
            case 2:
                cout<<"enter value";
                root=deletenode(root,value);
                      break;
              case 3:
                  cout<<"inorder";
                    inorder(root);
                    break;
                  case 4:
                  cout<<"preorder";
                    preorder(root);
                    break;
                    case 5:
                  cout<<"postorder";
                    postorder(root);
                    break;
case 6:
      cout<<"values";
        while(root!=nullptr)
          {
          cout<<root->data<<" ";
            }
                break;
default:
        cout<<"invalid";
        break;
}}}
